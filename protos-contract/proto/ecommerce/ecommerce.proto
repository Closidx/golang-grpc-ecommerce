syntax = "proto3";

package ecommerce;

option go_package = "ecommerce.proto";

enum OrderStatus {
    PENDING = 0;
    PROCESSING = 1;
    SHIPPED = 2;
    DELIVERED = 3;
    CANCELLED = 4;
}

message Product {
    string id = 1;
    string name = 2;
    string description = 3;
    float price = 4;
    string category = 5;
    int32 inventory = 6;
}

message Order {
    string id = 1;
    string userId = 2;
    repeated Product products = 3;
    float totalPrice = 4;
    OrderStatus status = 5;
}

message Cart {
    string id = 1;
    string userId = 2;
    repeated Product products = 3;
    float totalPrice = 4;
}

// Product Service
service ProductService {
    rpc GetProducts(GetProductsRequest) returns (GetProductsResponse);
    rpc GetProduct(GetProductRequest) returns (GetProductResponse);
    rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse);
    rpc UpdateProduct(UpdateProductRequest) returns (UpdateProductResponse);
    rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse);
}

message GetProductsRequest {
    string category = 1;
    int32 page = 2;
    int32 pageSize = 3;
}

message GetProductsResponse {
    repeated Product products = 1;
    int32 totalCount = 2;
}

message GetProductRequest {
    string id = 1;
}
  
message GetProductResponse {
    Product product = 1;
}

message CreateProductRequest {
    string name = 1;
    string description = 2;
    float price = 3;
    string category = 4;
    int32 inventory = 5;
}

message CreateProductResponse {
    Product product = 1;
}

message UpdateProductRequest {
    string id = 1;
    string name = 2;
    string description = 3;
    float price = 4;
    string category = 5;
    int32 inventory = 6;
}

message UpdateProductResponse {
    Product product = 1;
}

message DeleteProductRequest {
    string id = 1;
}

message DeleteProductResponse {
    bool success = 1;
}

// Order Service
service OrderService {
    rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse);
    rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse);
    rpc UpdateOrder(UpdateOrderRequest) returns (UpdateOrderResponse);
}

message GetOrdersRequest {
    string userId = 1;
    int32 page = 2;
    int32 pageSize = 3;
}

message GetOrdersResponse {
    repeated Order orders = 1;
    int32 totalCount = 2;
}

message CreateOrderRequest {
    string userId = 1;
    repeated string productIds = 2;
}

message CreateOrderResponse {
    Order order = 1;
}

message UpdateOrderRequest {
    string id = 1;
    OrderStatus status = 2;
}

message UpdateOrderResponse {
    Order order = 1;
}

// Cart Service
service CartService {
    rpc GetCart(GetCartRequest) returns (GetCartResponse);
    rpc AddToCart(AddToCartRequest) returns (AddToCartResponse);
    rpc RemoveFromCart(RemoveFromCartRequest) returns (RemoveFromCartResponse);
    rpc UpdateCart(UpdateCartRequest) returns (UpdateCartResponse);
}

message GetCartRequest {
    string userId = 1;
}

message GetCartResponse {
    Cart cart = 1;
}

message AddToCartRequest {
    string userId = 1;
    string productId = 2;
    int32 quantity = 3;
}

message AddToCartResponse {
    Cart cart = 1;
}

message RemoveFromCartRequest {
    string userId = 1;
    string productId = 2;
}

message RemoveFromCartResponse {
    Cart cart = 1;
}

message UpdateCartRequest {
    string userId = 1;
    repeated string productIds = 2;
}

message UpdateCartResponse {
    Cart cart = 1;
}
